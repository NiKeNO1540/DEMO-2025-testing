#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Sep  5 12:03:03 2025
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn sshpass -p admin ssh admin@172.16.1.4
match_max 100000
expect -exact "7\[r\[999;999H\[6n"
send -- "\[24;86R"
expect -exact "8\r
User Access Verification\r
\r
\r\r
EcoRouterOS version Camellia 14/05/2024 16:45:56\r
ecorouter>"
send -- "en\rconf t\rhostname hq-rtr\rip domain-name au-team.irpo\r\rusername net_admin\rpassword P@ssw0rd\rrole admin\rexit\r\rinterface int0\rdescription \"to isp\"\rip address 172.16.4.4/28\rexit\rport te0\rservice-instance te0/int0\rencapsulation untagged\rexit\rexit\rinterface int0\rconnect port te0 service-instance te0/int0\rexit\rinterface int1\rdescription \"to hq-srv\"\rip address 192.168.1.1/26\rexit\rinterface int2\rdescription \"to hq-cli\"\rip address 192.168.2.1/28\rexit\rport te1\rservice-instance te1/int1\rencapsulation dot1q 100\rrewrite pop 1\rexit\rservice-instance te1/int2\rencapsulation dot1q 200\rrewrite pop 1\rexit\rexit\rinterface int1\rconnect port te1 service-instance te1/int1\rinterface int2\rconnect port te1 service-instance te1/int2\rexit\r\rinterface int3\rdescription 999\rip address 192.168.99.1/29\rexit\rport te1\rservice-instance te1/int3\rencapsulation dot1q 999\rrewrite pop 1\rexit\rexit\rinterface int3\rconnect port te1 service-instance te1/int3\rexit\r\rint tunnel.0\rip add 172.16.0.1/30\rip mtu 1400\rip tunnel 172.16.4.4 172.16.5.5 mode gre\rip ospf authentication-key ecorouter\rexit\r\rrouter ospf 1\rnetwork 172.16.0.0/30 area 0\rnetwork 192.168.1.0/26 area 0\rnetwork 192.168.2.0/28 area 0\rpassive-interface default\rno passive-interface tunnel.0\rarea 0 authentication\rexit\r\rint int1\rip nat inside\rexit\rint int2\rip nat inside\rexit\rint int0\rip nat outside\rexit\rip nat pool NAT_POOL 192.168.1.1-192.168.1.254,192.168.2.1-192.168.2.254\rip nat source dynamic inside-to-outside pool NAT_POOL overload interface int0\r\rip pool cli_pool 192.168.2.10-192.168.2.10\rdhcp-server 1\rpool cli_pool 1\rmask 255.255.255.240\rgateway 192.168.2.1\rdns 192.168.1.10\rdomain-name au-team.irpo\rexit\rexit\rinterface int2\rdhcp-server 1\rexit\rntp timezone utc+5\rip route 0.0.0.0/0 172.16.4.1\rexit\rwr\rexit\r"
expect eof
